# -*- coding: utf-8 -*-
"""Calculo Lambda python Juan Lozano.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uGSVVIbl3xaaCDARDbTF9PyAmNEABPJx

**Factorial de un numero**
"""

factorial = lambda n: 1 if n == 0 else n * factorial(n - 1)

num = int(input("Ingrese un numero para calcular su factorial: "))
print(f"El factorial de {num} es: {factorial(num)}")

"""**Verificar si es numero primo o no**"""

is_prime = lambda n, d=2: True if n == 2 else False if n < 2 or n % d == 0 else True if d * d > n else is_prime(n, d + 1)

num = int(input("Ingrese un numero para verificar si es primo: "))
print(f"¿El número {num} es primo? {is_prime(num)}")

"""**Algoritmo de Euclides**"""



mcd = lambda x, y: x if y == 0 else mcd(y, x % y)

x = int(input("Ingrese el primer numero: "))
y = int(input("Ingrese el segundo numero: "))

print(f"El máximo común divisor de {x} y {y} es: {mcd(x, y)}")

"""**Algoritmo de biseccion**"""

biseccion = lambda f, a, b, tol: (lambda mid: mid if abs(f(mid)) < tol else
                                  biseccion(f, a, mid, tol) if f(a) * f(mid) < 0 else
                                  biseccion(f, mid, b, tol))((a + b) / 2)

f = lambda x: x**2 - 4  # Ejemplo: buscar la raiz de x² - 4 = 0
print(biseccion(f, 0, 3, 1e-6))  # Salida: Aproximadamente 2.0

"""**Serie Taylor Coseno**"""

from math import factorial

# Función de aproximación del coseno mediante la serie de Taylor
cos_taylor = lambda x, n=10: sum((-1)**k * (x**(2*k)) / factorial(2*k) for k in range(n))

# Solicitar entrada del usuario
x = float(input("Ingrese el valor de x en radianes: "))
n = int(input("Ingrese el numero de terminos para la aproximacion (ejemplo: 10): "))

# Calcular e imprimir el resultado
print(f"cos({x}) ≈ {cos_taylor(x, n)}")